---
import '../../styles/global.css';
import { getCollection, type CollectionEntry } from 'astro:content';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft, ArrowUp, ArrowDown, Minus } from 'lucide-react';

export async function getStaticPaths() {
  const techEntries = await getCollection('tech');
  return techEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

interface Props {
  entry: CollectionEntry<'tech'>;
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const ringColors: Record<string, string> = {
  adopt: 'bg-emerald-500/10 text-emerald-700 border-emerald-500/20',
  trial: 'bg-blue-500/10 text-blue-700 border-blue-500/20',
  assess: 'bg-amber-500/10 text-amber-700 border-amber-500/20',
  hold: 'bg-red-500/10 text-red-700 border-red-500/20',
};

const categoryLabels: Record<string, string> = {
  'data-management': 'Data Management',
  'languages': 'Languages',
  'infrastructure': 'Infrastructure',
  'datastores': 'Datastores',
};

const getChangeIcon = (indicator: string) => {
  switch (indicator) {
    case 'up':
      return 'text-green-600';
    case 'down':
      return 'text-red-600';
    default:
      return 'text-gray-400';
  }
};

const getChangeText = (indicator: string) => {
  switch (indicator) {
    case 'up':
      return 'Moved up';
    case 'down':
      return 'Moved down';
    default:
      return 'No change';
  }
};
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{entry.data.name} - AI Technology Radar</title>
    <meta name="description" content={entry.data.description} />
  </head>
  <body class="bg-gradient-to-br from-slate-50 to-slate-100 min-h-screen">
    <div class="max-w-4xl mx-auto p-4 md:p-8">
      <!-- Back Button -->
      <div class="mb-6">
        <a href="/">
          <Button variant="outline" className="gap-2">
            <ArrowLeft className="h-4 w-4" />
            Back to Radar
          </Button>
        </a>
      </div>

      <!-- Header Card -->
      <Card class="mb-8 shadow-lg">
        <CardHeader>
          <div class="flex flex-wrap gap-2 mb-4">
            <Badge variant="outline" className={ringColors[entry.data.ring]}>
              {entry.data.ring.toUpperCase()}
            </Badge>
            <Badge variant="outline">
              {categoryLabels[entry.data.category]}
            </Badge>
            <Badge variant="outline" className={getChangeIcon(entry.data.changeIndicator)}>
              {entry.data.changeIndicator === 'up' && <ArrowUp className="h-3 w-3 mr-1" />}
              {entry.data.changeIndicator === 'down' && <ArrowDown className="h-3 w-3 mr-1" />}
              {entry.data.changeIndicator === 'same' && <Minus className="h-3 w-3 mr-1" />}
              {getChangeText(entry.data.changeIndicator)}
            </Badge>
          </div>
          <CardTitle class="text-4xl mb-2">{entry.data.name}</CardTitle>
          <CardDescription class="text-lg">{entry.data.description}</CardDescription>
        </CardHeader>
      </Card>

      <!-- Content -->
      <Card class="shadow-lg">
        <CardContent class="pt-6">
          <article class="prose prose-slate max-w-none">
            <Content />
          </article>
        </CardContent>
      </Card>

      <!-- Footer -->
      <div class="mt-8 text-center text-sm text-slate-500">
        <p>Published: {new Date(entry.data.publishedDate).toLocaleDateString()}</p>
      </div>
    </div>
  </body>
</html>

<style is:global>
  .prose {
    color: rgb(51 65 85);
  }

  .prose h1 {
    display: none; /* Hide h1 since we show it in the header */
  }

  .prose h2 {
    color: rgb(15 23 42);
    font-weight: 700;
    font-size: 1.5rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .prose h3 {
    color: rgb(30 41 59);
    font-weight: 600;
    font-size: 1.25rem;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
  }

  .prose p {
    margin-bottom: 1rem;
    line-height: 1.75;
  }

  .prose ul {
    list-style-type: disc;
    margin-left: 1.5rem;
    margin-bottom: 1rem;
  }

  .prose li {
    margin-bottom: 0.5rem;
  }

  .prose strong {
    color: rgb(15 23 42);
    font-weight: 600;
  }

  .prose code {
    background-color: rgb(241 245 249);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
  }
</style>
